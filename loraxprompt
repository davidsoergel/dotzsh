#!/bin/zsh

# David Soergel <dev@davidsoergel.com>  12-22-2009

# A prompt based on the adam1 prompt theme
# modified to use vcs_info; see http://kriener.org/articles/2009/06/04/zsh-prompt-magic
# and with tricks from http://aperiodic.net/phil/prompt/
# and then further customized

setopt prompt_subst
autoload colors    
colors

# To manipulate precmd and preexec hooks...
autoload -U add-zsh-hook

# Variables common to all prompt styles
prompt_newline=$'\n%{\r%}'

autoload -Uz vcs_info

loraxprompt () {
	
    if [[ $ZSH_VERSION == 4.3.<6->* ||
    	$ZSH_VERSION == 4.<4->* ||
    	$ZSH_VERSION == <5->* ]]; then
    	# set feature which appeared first in 4.3.6
		vcs_info_exists=1
    else
    	print "Version control prompt info available only as of zsh 4.3.6; you have $ZSH_VERSION";
		vcs_info_exists=0
    fi
	
	# set some colors
	for COLOR in RED GREEN YELLOW WHITE BLACK CYAN; do
	    eval PR_$COLOR='%{$fg[${(L)COLOR}]%}'         
	    eval PR_BRIGHT_$COLOR='%{$fg_bold[${(L)COLOR}]%}'
	done                                                 
	PR_RESET="%{${reset_color}%}";     
		
    ###
    # See if we can use extended characters to look nicer.
    
 #   typeset -A altchar
 #   set -A altchar ${(s..)terminfo[acsc]}
 #   PR_SET_CHARSET="%{$terminfo[enacs]%}"
 #   PR_SHIFT_IN="%{$terminfo[smacs]%}"
 #   PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
    PR_HBAR=" "; 
	#${altchar[q]:--}
  #  PR_ULCORNER=${altchar[l]:--}
  #  PR_LLCORNER=${altchar[m]:--}
  #  PR_LRCORNER=${altchar[j]:--}
  #  PR_URCORNER=${altchar[k]:--}
	
	
	# set formats
	# %b - branchname
	# %u - unstagedstr (see below)
	# %c - stagedstr (see below)
	# %a - action (e.g. rebase-i)
	# %R - repository path
	# %S - path in the repository
#	FMT_BRANCH="(%s) ${PR_GREEN}%b${PR_RESET}" # e.g. master¹²
#	FMT_ACTION="(${PR_CYAN}%a${PR_RESET}%)"   # e.g. (rebase-i)
#	FMT_PATH="%R${PR_YELLOW}/%S"              # e.g. ~/repo/subdir
	
	# check-for-changes can be really slow.
	# you should disable it, if you work with large repositories    
#	zstyle ':vcs_info:*:prompt:*' check-for-changes true
#	zstyle ':vcs_info:*:prompt:*' unstagedstr '¹'  # display ¹ if there are unstaged changes
#	zstyle ':vcs_info:*:prompt:*' stagedstr '²'    # display ² if there are staged changes
#	zstyle ':vcs_info:*:prompt:*' actionformats "${FMT_BRANCH}${FMT_ACTION}//" "${FMT_PATH}"
#	zstyle ':vcs_info:*:prompt:*' actionformats "${FMT_BRANCH}ACTION" "${FMT_PATH}"
#	zstyle ':vcs_info:*:prompt:*' formats       "${FMT_BRANCH}"              "${FMT_PATH}"
#	zstyle ':vcs_info:*:prompt:*' nvcsformats   ""                             ""         
	
	zstyle ':vcs_info:*:prompt:*' formats       "%s"              "%b"
	
	prompt_adam1_color1=${1:-'blue'}
  prompt_adam1_color2=${2:-'cyan'}
  prompt_adam1_color3=${3:-'green'}

	# for older versions
	base_prompt="%{$bg_no_bold[$prompt_adam1_color1]%}%n@%m$PR_RESET "
	post_prompt="$PR_RESET"

	# these work only in zsh 4.3.x?
	#base_prompt="%K{blue}%n@%m%k "
	#post_prompt="%b%f%k"
	dateformat='%D{%a %m/%d} %t';
	
	
	# new versions
	#base_prompt_no_color=$(echo "$base_prompt" | perl -pe "s/%([FK]{.*?}|k)//g")
	post_prompt_no_color=$(echo "$post_prompt" | perl -pe "s/%([FK]\{.*?}|k)//g")
	
	# old versions
	base_prompt_no_color=$(echo "$base_prompt" | perl -pe "s/%\{.*?%}//g")
	post_prompt_no_color=$(echo "$post_prompt" | perl -pe "s/%\{.*?%}//g")
	

#	add-zsh-hook precmd loraxprompt_precmd
}

#loraxprompt_precmd () {
function precmd {
	setopt noxtrace localoptions

	local TERMWIDTH
    (( TERMWIDTH = ${COLUMNS} - 1 ))
		
	local git git_no_color git_expanded git_expanded_no_color
	
	if [[ $vcs_info_exists == 1 ]]; then

    	# set feature which appeared first in 4.3.6
 	
		vcs_info 'prompt'
		if [[ $vcs_info_msg_0_ != "" ]]; then
			git=' ($vcs_info_msg_0_) ${PR_CYAN}$vcs_info_msg_1_${PR_RESET}'
			git_no_color=' ($vcs_info_msg_0_) $vcs_info_msg_1_'
		
			git_expanded=$(print -P "$git")
			git_expanded_no_color=$(print -P "$git_no_color")
		fi
	fi
	
	base_prompt_expanded_no_color=$(print -P "$base_prompt_no_color")
	
	local promptsize
    ((promptsize=$#base_prompt_expanded_no_color + $#git_expanded_no_color))
    local pwdsize=${#${(%):-%~}}
	
	###
    # Truncate the path if it's too long.

    PR_FILLBAR=""
    PR_PWDLEN=""

	if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
		((PR_PWDLEN=$TERMWIDTH - $promptsize))
    else
		PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
    fi

	#path_prompt="%{$fg_bold[$prompt_adam1_color3]%}%${space_left}<...<%~$prompt_newline%{$fg_bold_white%}"
	path_prompt="%{$fg_bold[$prompt_adam1_color3]%}%$PR_PWDLEN<...<%~%<<${PR_RESET}"

	#path_prompt='%B%F{green}%$PR_PWDLEN<...<%~%<<${PR_RESET}'
	
	local errorcode='%(?..${PR_BRIGHT_RED}(%?%) ${PR_RESET})%(2L.+.)'
	          
	PS1="$prompt_newline$base_prompt$path_prompt${PR_FILLBAR}$git$prompt_newline$errorcode%# $post_prompt"
	#PS2="$base_prompt$path_prompt %_> $post_prompt"
	#PS3="$base_prompt$path_prompt ?# $post_prompt"
	PS2=" %_> $post_prompt"
	PS3=" ?# $post_prompt"
	RPS1="${PR_YELLOW}$dateformat${PR_RESET}"
	#RPS1="%D{%a %m/%d} %t"
	# %D{%a %m %d %t} TEST"
}

loraxprompt
